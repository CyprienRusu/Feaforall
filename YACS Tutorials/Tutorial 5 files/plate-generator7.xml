<?xml version='1.0' encoding='iso-8859-1' ?>
<proc name="newSchema_1">
   <property name="DefaultStudyID" value="1"/>
   <type name="string" kind="string"/>
   <struct name="Engines/dataref">
      <member name="ref" type="string"/>
   </struct>
   <type name="bool" kind="bool"/>
   <sequence name="boolvec" content="bool"/>
   <type name="double" kind="double"/>
   <sequence name="dblevec" content="double"/>
   <objref name="file" id="file"/>
   <type name="int" kind="int"/>
   <sequence name="intvec" content="int"/>
   <struct name="stringpair">
      <member name="name" type="string"/>
      <member name="value" type="string"/>
   </struct>
   <sequence name="propvec" content="stringpair"/>
   <objref name="pyobj" id="python:obj:1.0"/>
   <sequence name="seqboolvec" content="boolvec"/>
   <sequence name="seqdblevec" content="dblevec"/>
   <sequence name="seqdouble" content="double"/>
   <sequence name="seqintvec" content="intvec"/>
   <sequence name="seqpyobj" content="pyobj"/>
   <sequence name="stringvec" content="string"/>
   <sequence name="seqstringvec" content="stringvec"/>
   <container name="DefaultContainer">
      <property name="container_kind" value="Salome"/>
      <property name="attached_on_cloning" value="0"/>
      <property name="container_name" value="FactoryServer"/>
      <property name="name" value="localhost"/>
   </container>
   <datanode name="DataIn0">
      <parameter name="a" type="double">
         <value><double>500</double></value>
      </parameter>
      <parameter name="b" type="double">
         <value><double>500</double></value>
      </parameter>
      <parameter name="t" type="double">
         <value><double>12</double></value>
      </parameter>
      <parameter name="meshSize" type="double">
         <value><double>8</double></value>
      </parameter>
   </datanode>
   <inline name="geomNode">
      <script><code><![CDATA[# -*- coding: utf-8 -*-

###
### This file is generated automatically by SALOME v8.5.0 with dump python functionality
###

import sys
import salome

salome.salome_init()
theStudy = salome.myStudy

import salome_notebook
notebook = salome_notebook.NoteBook(theStudy)
sys.path.insert( 0, r'/home/cyprien/Desktop/yacs-example')

###
### GEOM component
###

import GEOM
from salome.geom import geomBuilder
import math
import SALOMEDS


geompy = geomBuilder.New(theStudy)

O = geompy.MakeVertex(0, 0, 0)
OX = geompy.MakeVectorDXDYDZ(1, 0, 0)
OY = geompy.MakeVectorDXDYDZ(0, 1, 0)
OZ = geompy.MakeVectorDXDYDZ(0, 0, 1)
Box_1 = geompy.MakeBoxDXDYDZ(a, b, t)
[ymin, zmax, volume] = geompy.Propagate(Box_1)
volume = geompy.CreateGroup(Box_1, geompy.ShapeType["SOLID"])
geompy.UnionIDs(volume, [1])
zmax = geompy.CreateGroup(Box_1, geompy.ShapeType["FACE"])
geompy.UnionIDs(zmax, [33])
zmin = geompy.CreateGroup(Box_1, geompy.ShapeType["FACE"])
geompy.UnionIDs(zmin, [31])
ymin = geompy.CreateGroup(Box_1, geompy.ShapeType["FACE"])
geompy.UnionIDs(ymin, [23])
ymax = geompy.CreateGroup(Box_1, geompy.ShapeType["FACE"])
geompy.UnionIDs(ymax, [27])
xmax = geompy.CreateGroup(Box_1, geompy.ShapeType["FACE"])
geompy.UnionIDs(xmax, [13])
xmin = geompy.CreateGroup(Box_1, geompy.ShapeType["FACE"])
geompy.UnionIDs(xmin, [3])
geompy.addToStudy( O, 'O' )
geompy.addToStudy( OX, 'OX' )
geompy.addToStudy( OY, 'OY' )
geompy.addToStudy( OZ, 'OZ' )
geompy.addToStudy( Box_1, 'Box_2' )
geompy.addToStudyInFather( Box_1, ymax, 'ymax' )
geompy.addToStudyInFather( Box_1, zmin, 'zmin' )
geompy.addToStudyInFather( Box_1, ymin, 'ymin' )
geompy.addToStudyInFather( Box_1, zmax, 'zmax' )
geompy.addToStudyInFather( Box_1, volume, 'volume' )
geompy.addToStudyInFather( Box_1, xmax, 'xmax' )
geompy.addToStudyInFather( Box_1, xmin, 'xmin' )

]]></code></script>
      <inport name="a" type="double"/>
      <inport name="b" type="double"/>
      <inport name="t" type="double"/>
      <outport name="xmin" type="pyobj"/>
      <outport name="xmax" type="pyobj"/>
      <outport name="ymin" type="pyobj"/>
      <outport name="ymax" type="pyobj"/>
      <outport name="zmin" type="pyobj"/>
      <outport name="zmax" type="pyobj"/>
      <outport name="volume" type="pyobj"/>
      <outport name="theStudy" type="pyobj"/>
      <outport name="Box_1" type="pyobj"/>
   </inline>
   <inline name="MeshNode">
      <script><code><![CDATA[###
### SMESH component
###

import  SMESH, SALOMEDS
from salome.smesh import smeshBuilder

smesh = smeshBuilder.New(theStudy)
Mesh_1 = smesh.Mesh(Box_1)
Regular_1D = Mesh_1.Segment()
Local_Length_1 = Regular_1D.LocalLength(meshSize,None,1e-07)
Quadrangle_2D = Mesh_1.Quadrangle(algo=smeshBuilder.QUADRANGLE)
Hexa_3D = Mesh_1.Hexahedron(algo=smeshBuilder.Hexa)
isDone = Mesh_1.Compute()
volume_1 = Mesh_1.GroupOnGeom(volume,'volume',SMESH.VOLUME)
zmax_1 = Mesh_1.GroupOnGeom(zmax,'zmax',SMESH.FACE)
zmin_1 = Mesh_1.GroupOnGeom(zmin,'zmin',SMESH.FACE)
ymin_1 = Mesh_1.GroupOnGeom(ymin,'ymin',SMESH.FACE)
ymax_1 = Mesh_1.GroupOnGeom(ymax,'ymax',SMESH.FACE)
xmax_1 = Mesh_1.GroupOnGeom(xmax,'xmax',SMESH.FACE)
xmin_1 = Mesh_1.GroupOnGeom(xmin,'xmin',SMESH.FACE)
smesh.SetName(Mesh_1, 'Mesh_1')
try:
  Mesh_1.ExportMED( r'/home/cyprien/Desktop/yacs-example/Plate.med', 0, SMESH.MED_V2_2, 1, None ,1)
  pass
except:
  print 'ExportToMEDX() failed. Invalid file name?'


## Set names of Mesh objects
smesh.SetName(Regular_1D.GetAlgorithm(), 'Regular_1D')
smesh.SetName(Hexa_3D.GetAlgorithm(), 'Hexa_3D')
smesh.SetName(Quadrangle_2D.GetAlgorithm(), 'Quadrangle_2D')
smesh.SetName(Local_Length_1, 'Local Length_1')
smesh.SetName(zmax_1, 'zmax')
smesh.SetName(zmin_1, 'zmin')
smesh.SetName(ymin_1, 'ymin')
smesh.SetName(ymax_1, 'ymax')
smesh.SetName(xmax_1, 'xmax')
smesh.SetName(xmin_1, 'xmin')
smesh.SetName(Mesh_1.GetMesh(), 'Mesh_1')
smesh.SetName(volume_1, 'volume')
]]></code></script>
      <inport name="xmin" type="pyobj"/>
      <inport name="xmax" type="pyobj"/>
      <inport name="ymin" type="pyobj"/>
      <inport name="ymax" type="pyobj"/>
      <inport name="zmin" type="pyobj"/>
      <inport name="zmax" type="pyobj"/>
      <inport name="volume" type="pyobj"/>
      <inport name="theStudy" type="pyobj"/>
      <inport name="Box_1" type="pyobj"/>
      <inport name="meshSize" type="double"/>
   </inline>
   <datanode name="matDataIn">
      <parameter name="NU" type="double">
         <value><double>0.28</double></value>
      </parameter>
      <parameter name="E" type="seqdouble">
         <value><array><data>
<value><double>20000</double></value>
<value><double>22000</double></value>
<value><double>25000</double></value>
</data></array></value>
      </parameter>
   </datanode>
   <forloop name="ForLoop5" nsteps="3">
      <bloc name="Bloc1">
         <inline name="commWriterNode">
            <script><code><![CDATA[import os,sys

print 'execution'

commFilePath = os.path.join('/home/cyprien/Desktop/yacs-example', "RunCase_1_Stage_1.comm")

commString="""DEBUT(LANG='EN')


mesh = LIRE_MAILLAGE(identifier=u'0:1',
                     UNITE=20)

model = AFFE_MODELE(identifier=u'1:1',
                    AFFE=_F(MODELISATION=('3D', ),
                            PHENOMENE='MECANIQUE',
                            TOUT='OUI'),
                    MAILLAGE=mesh)

mater = DEFI_MATERIAU(identifier=u'2:1',
                      ELAS=_F(E="""+str(E[index])+""",
                              NU="""+str(NU)+"""))

fieldmat = AFFE_MATERIAU(identifier=u'3:1',
                         AFFE=_F(MATER=(mater, ),
                                 TOUT='OUI'),
                         MODELE=model)

load = AFFE_CHAR_MECA(identifier=u'4:1',
                      DDL_IMPO=_F(GROUP_MA=('xmin', ),
                                  LIAISON='ENCASTRE'),
                      MODELE=model,
                      PRES_REP=_F(GROUP_MA=('xmax', ),
                                  PRES=-200.0))

reslin = MECA_STATIQUE(identifier=u'5:1',
                       CHAM_MATER=fieldmat,
                       EXCIT=_F(CHARGE=load),
                       MODELE=model)

reslin = CALC_CHAMP(identifier=u'6:1',
                    reuse=reslin,
                    CRITERES=('SIEQ_ELGA', 'SIEQ_ELNO', 'SIEQ_NOEU'),
                    RESULTAT=reslin)

IMPR_RESU(identifier=u'7:1',
          FORMAT='MED',
          RESU=_F(RESULTAT=reslin),
          UNITE=80)

IMPR_RESU(identifier=u'8:1',
          FORMAT='RESULTAT',
          RESU=_F(NOM_CHAM=('DEPL', ),
                  RESULTAT=reslin,
                  VALE_MAX='OUI',
                  VALE_MIN='OUI'),
          UNITE=2)

FIN()"""


commFile = open(commFilePath,'w')
commFile.write(commString)
commFile.close()
]]></code></script>
            <load container="DefaultContainer"/>
            <inport name="NU" type="double"/>
            <inport name="E" type="seqdouble"/>
            <inport name="index" type="int"/>
         </inline>
         <inline name="asterNode">
            <script><code><![CDATA[import os, subprocess, sys

export = '/home/cyprien/Desktop/yacs-example/export'

appliPath = os.path.realpath('/home/cyprien/salome_meca2018/V2018/tools/Code_aster_frontend-20180/bin')

proc = subprocess.Popen([os.path.join(appliPath, 'as_run')] + [export], close_fds=True)
out, err = proc.communicate()


]]></code></script>
            <load container="DefaultContainer"/>
         </inline>
         <inline name="PyScript4">
            <script><code><![CDATA[import os

os.rename('/home/cyprien/Desktop/yacs-example/plate-res.rmed','/home/cyprien/Desktop/yacs-example/plate-res'+str(index)+'.rmed')

]]></code></script>
            <load container="DefaultContainer"/>
            <inport name="index" type="int"/>
         </inline>
         <inline name="paravisPostnode">
            <script><code><![CDATA[import pvsimple
pvsimple.ShowParaviewView()
#### import the simple module from the paraview
from pvsimple import *
#### disable automatic camera reset on 'Show'
pvsimple._DisableFirstRenderCameraReset()

# create a new 'MED Reader'
plateresrmed = MEDReader(FileName='/home/cyprien/Desktop/yacs-example/plate-res'+str(index)+'.rmed')

# Properties modified on plateresrmed
plateresrmed.AllArrays = ['TS0/mesh/ComSup0/reslin__DEPL@@][@@P1', 'TS0/mesh/ComSup0/reslin__SIEF_ELGA@@][@@GAUSS', 'TS0/mesh/ComSup0/reslin__SIEQ_ELGA@@][@@GAUSS', 'TS0/mesh/ComSup0/reslin__SIEQ_ELNO@@][@@GSSNE', 'TS0/mesh/ComSup0/reslin__SIEQ_NOEU@@][@@P1']

# get active view
renderView1 = GetActiveViewOrCreate('RenderView')
# uncomment following to set a specific view size
renderView1.ViewSize = [1364, 605]

# show data in view
plateresrmedDisplay = Show(plateresrmed, renderView1)

# trace defaults for the display properties.
plateresrmedDisplay.Representation = 'Surface'

# reset view to fit data
renderView1.ResetCamera()

# update the view to ensure updated data information
renderView1.Update()

# set scalar coloring
ColorBy(plateresrmedDisplay, ('POINTS', 'reslin__DEPL', 'Magnitude'))

# rescale color and/or opacity maps used to include current data range
plateresrmedDisplay.RescaleTransferFunctionToDataRange(True, False)

# show color bar/color legend
plateresrmedDisplay.SetScalarBarVisibility(renderView1, True)

# get color transfer function/color map for 'reslin__DEPL'
reslin__DEPLLUT = GetColorTransferFunction('reslin__DEPL')

# change representation type
plateresrmedDisplay.SetRepresentationType('Surface With Edges')

# current camera placement for renderView1
renderView1.CameraPosition = [402.3115126285086, -488.36077622793425, 558.3327835568605]
renderView1.CameraFocalPoint = [277.46705153769426, 225.02652745443572, -30.103913306379802]
renderView1.CameraViewUp = [-0.1351730927303462, 0.6162889721702308, 0.7758325449367756]
renderView1.CameraParallelScale = 353.6042986164054

# save screenshot
SaveScreenshot('/home/cyprien/Desktop/yacs-example/DEPL2_'+str(index)+'.png', renderView1, ImageResolution=[1364, 605])

# set scalar coloring
ColorBy(plateresrmedDisplay, ('POINTS', 'reslin__SIEQ_NOEU', 'Magnitude'))

# Hide the scalar bar for this color map if no visible data is colored by it.
HideScalarBarIfNotNeeded(reslin__DEPLLUT, renderView1)

# rescale color and/or opacity maps used to include current data range
plateresrmedDisplay.RescaleTransferFunctionToDataRange(True, False)

# show color bar/color legend
plateresrmedDisplay.SetScalarBarVisibility(renderView1, True)

# get color transfer function/color map for 'reslin__SIEQ_NOEU'
reslin__SIEQ_NOEULUT = GetColorTransferFunction('reslin__SIEQ_NOEU')

# current camera placement for renderView1
renderView1.CameraPosition = [402.3115126285086, -488.36077622793425, 558.3327835568605]
renderView1.CameraFocalPoint = [277.46705153769426, 225.02652745443572, -30.103913306379802]
renderView1.CameraViewUp = [-0.1351730927303462, 0.6162889721702308, 0.7758325449367756]
renderView1.CameraParallelScale = 353.6042986164054

# save screenshot
SaveScreenshot('/home/cyprien/Desktop/yacs-example/SIEQ_NOEU2_'+str(index)+'.png', renderView1, ImageResolution=[1364, 605])

#### saving camera placements for all active views

# current camera placement for renderView1
renderView1.CameraPosition = [402.3115126285086, -488.36077622793425, 558.3327835568605]
renderView1.CameraFocalPoint = [277.46705153769426, 225.02652745443572, -30.103913306379802]
renderView1.CameraViewUp = [-0.1351730927303462, 0.6162889721702308, 0.7758325449367756]
renderView1.CameraParallelScale = 353.6042986164054
]]></code></script>
            <load container="DefaultContainer"/>
            <inport name="index" type="int"/>
         </inline>
         <inline name="textNode">
            <script><code><![CDATA[import os,sys,re
import pandas as pd

pathToRes = os.path.join('/home/cyprien/Desktop/yacs-example','plate-res.txt')
pathToCsv = os.path.join('/home/cyprien/Desktop/yacs-example','mydata2.csv')

myfile = open(pathToRes,"r")

content = myfile.read()

dispRegex2 = re.compile(r'LA VALEUR (MAX|MIN)IMALE DE (DX|DY|DZ) {2,}EST {1,}(-?\d.\d{14}E-?\+?\d\d) ')

mo2 = dispRegex2.findall(content)

print(mo2)

mydata = pd.DataFrame(mo2,columns=["MIN/MAX","Component","Value"])

mydata.to_csv(pathToCsv)
]]></code></script>
            <load container="DefaultContainer"/>
            <inport name="index" type="int"/>
         </inline>
         <control> <fromnode>commWriterNode</fromnode> <tonode>asterNode</tonode> </control>
         <control> <fromnode>asterNode</fromnode> <tonode>PyScript4</tonode> </control>
         <control> <fromnode>PyScript4</fromnode> <tonode>paravisPostnode</tonode> </control>
         <control> <fromnode>PyScript4</fromnode> <tonode>textNode</tonode> </control>
      </bloc>
   </forloop>
   <control> <fromnode>DataIn0</fromnode> <tonode>geomNode</tonode> </control>
   <control> <fromnode>DataIn0</fromnode> <tonode>MeshNode</tonode> </control>
   <control> <fromnode>geomNode</fromnode> <tonode>MeshNode</tonode> </control>
   <control> <fromnode>MeshNode</fromnode> <tonode>matDataIn</tonode> </control>
   <control> <fromnode>matDataIn</fromnode> <tonode>ForLoop5</tonode> </control>
   <datalink control="false">
      <fromnode>DataIn0</fromnode> <fromport>a</fromport>
      <tonode>geomNode</tonode> <toport>a</toport>
   </datalink>
   <datalink control="false">
      <fromnode>DataIn0</fromnode> <fromport>b</fromport>
      <tonode>geomNode</tonode> <toport>b</toport>
   </datalink>
   <datalink control="false">
      <fromnode>DataIn0</fromnode> <fromport>t</fromport>
      <tonode>geomNode</tonode> <toport>t</toport>
   </datalink>
   <datalink control="false">
      <fromnode>DataIn0</fromnode> <fromport>meshSize</fromport>
      <tonode>MeshNode</tonode> <toport>meshSize</toport>
   </datalink>
   <datalink control="false">
      <fromnode>geomNode</fromnode> <fromport>xmin</fromport>
      <tonode>MeshNode</tonode> <toport>xmin</toport>
   </datalink>
   <datalink control="false">
      <fromnode>geomNode</fromnode> <fromport>xmax</fromport>
      <tonode>MeshNode</tonode> <toport>xmax</toport>
   </datalink>
   <datalink control="false">
      <fromnode>geomNode</fromnode> <fromport>ymin</fromport>
      <tonode>MeshNode</tonode> <toport>ymin</toport>
   </datalink>
   <datalink control="false">
      <fromnode>geomNode</fromnode> <fromport>ymax</fromport>
      <tonode>MeshNode</tonode> <toport>ymax</toport>
   </datalink>
   <datalink control="false">
      <fromnode>geomNode</fromnode> <fromport>zmin</fromport>
      <tonode>MeshNode</tonode> <toport>zmin</toport>
   </datalink>
   <datalink control="false">
      <fromnode>geomNode</fromnode> <fromport>zmax</fromport>
      <tonode>MeshNode</tonode> <toport>zmax</toport>
   </datalink>
   <datalink control="false">
      <fromnode>geomNode</fromnode> <fromport>volume</fromport>
      <tonode>MeshNode</tonode> <toport>volume</toport>
   </datalink>
   <datalink control="false">
      <fromnode>geomNode</fromnode> <fromport>theStudy</fromport>
      <tonode>MeshNode</tonode> <toport>theStudy</toport>
   </datalink>
   <datalink control="false">
      <fromnode>geomNode</fromnode> <fromport>Box_1</fromport>
      <tonode>MeshNode</tonode> <toport>Box_1</toport>
   </datalink>
   <datalink control="false">
      <fromnode>matDataIn</fromnode> <fromport>NU</fromport>
      <tonode>ForLoop5.Bloc1.commWriterNode</tonode> <toport>NU</toport>
   </datalink>
   <datalink control="false">
      <fromnode>matDataIn</fromnode> <fromport>E</fromport>
      <tonode>ForLoop5.Bloc1.commWriterNode</tonode> <toport>E</toport>
   </datalink>
   <datalink control="false">
      <fromnode>ForLoop5</fromnode> <fromport>index</fromport>
      <tonode>ForLoop5.Bloc1.commWriterNode</tonode> <toport>index</toport>
   </datalink>
   <datalink control="false">
      <fromnode>ForLoop5</fromnode> <fromport>index</fromport>
      <tonode>ForLoop5.Bloc1.PyScript4</tonode> <toport>index</toport>
   </datalink>
   <datalink control="false">
      <fromnode>ForLoop5</fromnode> <fromport>index</fromport>
      <tonode>ForLoop5.Bloc1.paravisPostnode</tonode> <toport>index</toport>
   </datalink>
   <datalink control="false">
      <fromnode>ForLoop5</fromnode> <fromport>index</fromport>
      <tonode>ForLoop5.Bloc1.textNode</tonode> <toport>index</toport>
   </datalink>
   <parameter>
      <tonode>ForLoop5</tonode><toport>nsteps</toport>
      <value><int>3</int></value>
   </parameter>
   <presentation name="geomNode" x="257" y="129" width="158" height="279" expanded="1" expx="257" expy="129" expWidth="158" expHeight="279" shownState="0"/>
   <presentation name="matDataIn" x="508" y="37" width="158" height="90" expanded="1" expx="508" expy="37" expWidth="158" expHeight="90" shownState="0"/>
   <presentation name="ForLoop5.Bloc1.textNode" x="637.679" y="161.295" width="158" height="63" expanded="1" expx="637.679" expy="161.295" expWidth="158" expHeight="63" shownState="0"/>
   <presentation name="DataIn0" x="23" y="85.5" width="158" height="144" expanded="1" expx="23" expy="85.5" expWidth="158" expHeight="144" shownState="0"/>
   <presentation name="ForLoop5.Bloc1" x="6" y="61" width="799.679" height="245.194" expanded="1" expx="6" expy="61" expWidth="799.679" expHeight="245.194" shownState="0"/>
   <presentation name="ForLoop5.Bloc1.commWriterNode" x="48" y="47" width="158" height="117" expanded="1" expx="48" expy="47" expWidth="158" expHeight="117" shownState="0"/>
   <presentation name="ForLoop5.Bloc1.PyScript4" x="269.638" y="178.194" width="158" height="63" expanded="1" expx="269.638" expy="178.194" expWidth="158" expHeight="63" shownState="0"/>
   <presentation name="ForLoop5.Bloc1.paravisPostnode" x="598.594" y="97.7824" width="158" height="63" expanded="1" expx="598.594" expy="97.7824" expWidth="158" expHeight="63" shownState="0"/>
   <presentation name="MeshNode" x="495" y="173" width="158" height="306" expanded="1" expx="495" expy="173" expWidth="158" expHeight="306" shownState="0"/>
   <presentation name="ForLoop5.Bloc1.asterNode" x="252.007" y="73.9299" width="158" height="36" expanded="1" expx="252.007" expy="73.9299" expWidth="158" expHeight="36" shownState="0"/>
   <presentation name="ForLoop5" x="837.882" y="74.5056" width="809.679" height="310.194" expanded="1" expx="837.882" expy="74.5056" expWidth="809.679" expHeight="310.194" shownState="0"/>
   <presentation name="__ROOT__" x="0" y="0" width="1651.56" height="483" expanded="1" expx="0" expy="0" expWidth="1651.56" expHeight="483" shownState="0"/>
</proc>
